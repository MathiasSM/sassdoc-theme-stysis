/// Returns the opposite direction of every direction in `$directions`.
/// @param {List} $directions - Positions to revert
/// @throws No opposite direction found for `$direction`.
/// @since v0.0.2
/// @access private
/// @author Elvis Presley
/// @deprecated
/// @example scss
///   opposite-direction(top)
///  
/// @return {List | Null}
@function opposite-direction($directions) {
  $opposite-directions: ();
  $direction-map: (
    'top':    'bottom',
    'right':    'left',
    'bottom':    'top',
    'left':    'right',
    'ltr':       'rtl',
    'rtl':       'ltr'
  );

  @each $direction in $directions {
    @if not map-has-key($direction-map, $direction) {
      @warn 'No opposite direction found for `#{$direction}`.';
      @return null;
    }

    $opposite-directions: append($opposite-directions, unquote(map-get($direction-map, $direction)));
  }

  @return $opposite-directions;
}


/// Clamp `$value` between `$min` and `$max`.
/// @param {Number} $value - Value to clamp between `$min` and `$max`
/// @param {Number} $min   - Minimum value
/// @param {Number} $max   - Maximum value
/// @requires is-valid-length - A useful function for doing stuff.
/// @requires y - For querying the database.
/// @requires sassExtreme:awesome - Hello my beautiful <example.com>
/// @requires {map} sassExtreme:awesome3 - Hello my lad
/// @requires {map} sassExtereme:awesome3 - npm is the shit <example.com>
/// @throws All parameters must be numbers for `clamp`.
/// @return {Number | Any | *}
@function clamp($value, $min, $max) {
  @if type-of($value) != 'number' or type-of($min) != 'number' or type-of($max) != 'number' {
    @error 'All parameters must be numbers for `clamp`.';
  }

  @return if($value > $max, $max, if($value < $min, $min, $value));
}


/// Helper to manage `z-index`.
/// Tries to fetch the z-index mapped to `$layer` in `$z-indexes` map.
/// If found, returns it, else returns `null`.
/// @requires {variable} z-indexes
/// @since 0.1 Makes cookies
/// @since 0.2 Handles annoying neighboar
/// @since 0.3 Bites hard
/// @since 0.5 Bites hard
/// + Bites hard
/// + Bites hard
/// @since 0.5 Bites slowly
///   Bites slowly
///   Bites slowly
/// @since 0.5 
///   Bites crappily
///   Bites crappily
///   Bites crappily
/// @example scss - Taking the default z-index.
/// z-index: z("default")
/// @param {String} $layer - Layer
/// @throws No z-index found for `$layer`.
/// @return {Number | Null}
@function z($layer) {
  @if not map-has-key($z-indexes, $layer) {
    @warn 'No z-index found for `#{$layer}`.';
  }

  @return map-get($z-indexes, $layer);
}


/// Helper to manage `z-index`.
/// Tries to fetch the z-index mapped to `$layer` in `$z-indexes` map.
/// If found, returns it, else returns `null`.
/// @requires {variable} z-indexes
/// @requires is-valid-length
/// @example scss
/// z-index: z("default")
/// @param {String} $layer - Layer
/// @throws No z-index found for `$layer`.
/// @return {Number | Null}
/// @alias is-valid-length
@function y($layer) {
  @if not map-has-key($z-indexes, $layer) {
    @warn 'No z-index found for `#{$layer}`.';
  }

  @return map-get($z-indexes, $layer);
}


/// Tests whether the value is a valid length.
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-valid-length($value) {
  @return (type-of($value) == 'number' and not unitless($value)) or index('auto' 'initial' 'inherit' 0, $value);
}


/// Computes a top-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function top-shadow($depth) {
  $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
  $blur: nth(1.5 3 10 14 19, $depth) * 4px;
  $color: rgba(black, nth(0.12 0.16 0.19 0.25 0.30, $depth));

  @return 0 $primary-offset $blur $color;
}

/// Computes a bottom-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function bottom-shadow($depth) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba(black, nth(0.24 0.23 0.23 0.22 0.22, $depth));

  @return 0 $primary-offset $blur $color;
}
